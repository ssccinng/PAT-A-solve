#include <stdio.h>
#include <stdlib.h>
#include <algorithm>
#include <vector>
#include <map>

using namespace std;

int ord[10100], pre[10100];
map <int, int> pos1, pos2;




int hf(int a) {
	return (pos1.find(a) != pos1.end()) ;
}

void LCA(int orl, int orr, int preroot, int a, int b) {
	int rootpos = pos1[pre[preroot]], apos = pos1[a], bpos = pos1[b];
	if ((apos - rootpos) * (bpos - rootpos) < 0) {
		printf("LCA of %d and %d is %d.\n", a, b, ord[rootpos]);
	}
	else if ((apos - rootpos) * (bpos - rootpos) == 0){
		int root = (apos - rootpos == 0 ? a : b);
		int node = a + b - root;
		printf("%d is an ancestor of %d.\n", root, node);
	}
	else if (apos < rootpos) {
		LCA(orl, rootpos - 1, preroot + 1, a, b);
	}
	else {
		LCA(rootpos + 1, orr, preroot + rootpos - orl + 1, a, b);
	}
}

int main () {
	int M, N;
	scanf("%d %d", &M, &N);
	
	for (int i = 0; i < N; ++i) {
		scanf("%d", ord + i);
		pos1[ord[i]] = i;
	}
	
	for (int i = 0; i < N; ++i) {
		scanf("%d", pre + i);
		pos2[pre[i]] = i;
	}
	
	for (int i = 0; i < M; ++i) {
		int a, b;
		scanf("%d %d", &a, &b);
		
		if (!hf(a) && !hf(b)) {
            printf("ERROR: %d and %d are not found.\n", a, b);
		}
		else if (!hf(a) || !hf(b)) {
			printf("ERROR: %d is not found.\n", hf(a) ? b : a);
		}
		else {
			LCA(0, N - 1, 0, a, b);
		}
	}
	
	
	return 0;
} 
